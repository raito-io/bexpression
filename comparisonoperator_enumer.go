// Code generated by "enumer -type=ComparisonOperator -values -gqlgen -yaml -json -trimprefix=ComparisonOperator"; DO NOT EDIT.

package bexpression

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _ComparisonOperatorName = "EqualNotEqualLessThanLessThanOrEqualGreaterThanGreaterThanOrEqualHasContains"

var _ComparisonOperatorIndex = [...]uint8{0, 5, 13, 21, 36, 47, 65, 68, 76}

const _ComparisonOperatorLowerName = "equalnotequallessthanlessthanorequalgreaterthangreaterthanorequalhascontains"

func (i ComparisonOperator) String() string {
	if i < 0 || i >= ComparisonOperator(len(_ComparisonOperatorIndex)-1) {
		return fmt.Sprintf("ComparisonOperator(%d)", i)
	}
	return _ComparisonOperatorName[_ComparisonOperatorIndex[i]:_ComparisonOperatorIndex[i+1]]
}

func (ComparisonOperator) Values() []string {
	return ComparisonOperatorStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparisonOperatorNoOp() {
	var x [1]struct{}
	_ = x[ComparisonOperatorEqual-(0)]
	_ = x[ComparisonOperatorNotEqual-(1)]
	_ = x[ComparisonOperatorLessThan-(2)]
	_ = x[ComparisonOperatorLessThanOrEqual-(3)]
	_ = x[ComparisonOperatorGreaterThan-(4)]
	_ = x[ComparisonOperatorGreaterThanOrEqual-(5)]
	_ = x[ComparisonOperatorHas-(6)]
	_ = x[ComparisonOperatorContains-(7)]
}

var _ComparisonOperatorValues = []ComparisonOperator{ComparisonOperatorEqual, ComparisonOperatorNotEqual, ComparisonOperatorLessThan, ComparisonOperatorLessThanOrEqual, ComparisonOperatorGreaterThan, ComparisonOperatorGreaterThanOrEqual, ComparisonOperatorHas, ComparisonOperatorContains}

var _ComparisonOperatorNameToValueMap = map[string]ComparisonOperator{
	_ComparisonOperatorName[0:5]:        ComparisonOperatorEqual,
	_ComparisonOperatorLowerName[0:5]:   ComparisonOperatorEqual,
	_ComparisonOperatorName[5:13]:       ComparisonOperatorNotEqual,
	_ComparisonOperatorLowerName[5:13]:  ComparisonOperatorNotEqual,
	_ComparisonOperatorName[13:21]:      ComparisonOperatorLessThan,
	_ComparisonOperatorLowerName[13:21]: ComparisonOperatorLessThan,
	_ComparisonOperatorName[21:36]:      ComparisonOperatorLessThanOrEqual,
	_ComparisonOperatorLowerName[21:36]: ComparisonOperatorLessThanOrEqual,
	_ComparisonOperatorName[36:47]:      ComparisonOperatorGreaterThan,
	_ComparisonOperatorLowerName[36:47]: ComparisonOperatorGreaterThan,
	_ComparisonOperatorName[47:65]:      ComparisonOperatorGreaterThanOrEqual,
	_ComparisonOperatorLowerName[47:65]: ComparisonOperatorGreaterThanOrEqual,
	_ComparisonOperatorName[65:68]:      ComparisonOperatorHas,
	_ComparisonOperatorLowerName[65:68]: ComparisonOperatorHas,
	_ComparisonOperatorName[68:76]:      ComparisonOperatorContains,
	_ComparisonOperatorLowerName[68:76]: ComparisonOperatorContains,
}

var _ComparisonOperatorNames = []string{
	_ComparisonOperatorName[0:5],
	_ComparisonOperatorName[5:13],
	_ComparisonOperatorName[13:21],
	_ComparisonOperatorName[21:36],
	_ComparisonOperatorName[36:47],
	_ComparisonOperatorName[47:65],
	_ComparisonOperatorName[65:68],
	_ComparisonOperatorName[68:76],
}

// ComparisonOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonOperatorString(s string) (ComparisonOperator, error) {
	if val, ok := _ComparisonOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparisonOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparisonOperator values", s)
}

// ComparisonOperatorValues returns all values of the enum
func ComparisonOperatorValues() []ComparisonOperator {
	return _ComparisonOperatorValues
}

// ComparisonOperatorStrings returns a slice of all String values of the enum
func ComparisonOperatorStrings() []string {
	strs := make([]string, len(_ComparisonOperatorNames))
	copy(strs, _ComparisonOperatorNames)
	return strs
}

// IsAComparisonOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparisonOperator) IsAComparisonOperator() bool {
	for _, v := range _ComparisonOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ComparisonOperator
func (i ComparisonOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ComparisonOperator
func (i *ComparisonOperator) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ComparisonOperator should be a string, got %s", data)
	}

	var err error
	*i, err = ComparisonOperatorString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for ComparisonOperator
func (i ComparisonOperator) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ComparisonOperator
func (i *ComparisonOperator) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ComparisonOperatorString(s)
	return err
}

// MarshalGQL implements the graphql.Marshaler interface for ComparisonOperator
func (i ComparisonOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for ComparisonOperator
func (i *ComparisonOperator) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("ComparisonOperator should be a string, got %T", value)
	}

	var err error
	*i, err = ComparisonOperatorString(str)
	return err
}
